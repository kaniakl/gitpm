# this script parses a csv, json or python dict-like structure to a .XES file.

import sys
import getopt
import logging
import getpass
from xml.etree.ElementTree import Element, SubElement, tostring, Comment, ElementTree
from xml.dom import minidom
import csv

import dateutil.parser
from datetime import datetime


def prettify(elem):
    rough_string = tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml()

def parse_time(time):
    time = datetime.strptime(time, '%Y-%m-%dT%H:%M:%S%z')
    return datetime.strftime(time.astimezone(), '{}%z'.format(time.isoformat(timespec='milliseconds')))


def parse_csv(file, instances):
    if file.split('.')[-1] != 'csv':
        logging.error("file format error")
        exit(1)
    with open(file, 'r', encoding='utf-8', newline='') as csvfile:
        reader = csv.reader(csvfile, strict=True)
        for row in reader:
            if reader.line_num != 1:
                if not row[0] in instances:
                    instances[row[0]] = [row[1:]]
                else:
                    instances[row[0]].append(row[1:])


def parse_header(root):
    extensions = [
        Element('extension', {
            'name': 'Concept',
            'prefix': 'concept',
            'url': 'http://www.xes-standard.org/concept.xesext'
        }), Element('extension', {
            'name': 'Time',
            'prefix': 'time',
            'url': 'http://www.xes-standard.org/time.xesext'
        }), Element('extension', {
            'name': 'Organizational',
            'prefix': 'org',
            'url': 'http://www.xes-standard.org/org.xesext'
        }), Element('extension', {
            'name': 'Lifecycle',
            'prefix': 'lifecycle',
            'url': 'http://www.xes-standard.org/lifecycle.xesext'
        })
    ]
    global_trace = Element('global', {'scope': 'trace'})
    global_trace.append(Element('string', {'key': 'concept:name', 'value': 'unknown'}))
    global_event = Element('global', {'scope': 'event'})
    global_event_attrs = [
        Element('string', {'key': 'concept:instance', 'value': 'unknown'}),
        Element('string', {'key': 'concept:name', 'value': 'unknown'}),
        Element('date', {'key': 'time:timestamp', 'value': '1970-01-01T00:00:00.000+08:00'}),
        Element('string', {'key': 'lifecycle:transition', 'value': 'unknown'}),
        Element('int', {'key': 'duration', 'value': '0'}),
        Element('string', {'key': 'org:role', 'value': 'unknown'}),
        Element('string', {'key': 'org:resource', 'value': 'unknown'})
    ]
    global_event.extend(global_event_attrs)
    globals = [global_trace, global_event]
    classifiers = [
        Element('classifier', {'name': 'Activity', 'keys': 'concept:name'}),
        # Element('classifier', {'name': 'Activity and Transition', 'keys': 'concept:name lifecycle:transition'})
    ]
    strings = [
        Element('string', {'key': 'concept:name', 'value': 'EIS2018-HW1'}),
        Element('string', {'key': 'creator', 'value': getpass.getuser()})
    ]

    root.append(Comment('Generated by csv2xes'))
    root.extend(extensions)
    root.extend(globals)
    root.extend(classifiers)
    root.extend(strings)


def parse_json_file(file, instances):
    pass

def parse_dict(kwargs, instances):
    for events in kwargs['log']:
        event = []
        for key in events.keys():
            if key != 'caseID':
                event.append(events[key])
        if not str(events['caseID']) in instances:
            instances[str(events['caseID'])] = [event]
        else:
            instances[str(events['caseID'])].append(event)

def generate_xes(**kwargs):
    instances = dict()

    log = Element('log', {'xes.version': '2.0', 'xmlns': 'http://www.xes-standard.org'})
    parse_header(log)
    if 'filename' not in kwargs:
        parse_dict(kwargs, instances)
    elif kwargs['filename'].split('.')[-1] == 'csv':
        parse_csv(kwargs['inputFile'], instances)
    else:
        parse_json_file(kwargs['inputFile'], instances)
    count = 0
    for instance in instances.items():
        trace = SubElement(log, 'trace')
        trace.append(Element('string', {'key': 'concept:name', 'value': instance[0]}))
        for element in instance[1]:
            start_event = Element('event')
            # complete_event = Element('event')
            time = element[1]
            if 'parsedTime' not in kwargs and kwargs['parsedTime'] is False:
                time = parse_time(time)
            start_attrs = [
                Element('string', {'key': 'concept:instance', 'value': str(count)}),
                Element('string', {'key': 'concept:name', 'value': element[0]}),
                Element('date', {'key': 'time:timestamp', 'value': time}),
                Element('string', {'key': 'lifecycle:transition', 'value': 'start'}),
                Element('string', {'key': 'org:resource', 'value': element[2]})
            ]
            '''
            complete_attrs = [
                Element('string', {'key': 'concept:instance', 'value': str(count)}),
                Element('string', {'key': 'concept:name', 'value': element[4]}),
                Element('date', {'key': 'time:timestamp', 'value': time}),
                Element('string', {'key': 'lifecycle:transition', 'value': 'complete'}),
                Element('int', {'key': 'duration', 'value': element[3]}),
                Element('string', {'key': 'org:role', 'value': element[5]}),
                Element('string', {'key': 'org:resource', 'value': element[0]})
            ]
            '''
            start_event.extend(start_attrs)
            # complete_event.extend(complete_attrs)
            trace.append(start_event)
            # trace.append(complete_event)
            count += 1
    elementTree = ElementTree(element=log)
    elementTree.write('{}.xes'.format(kwargs['outputFile']), encoding='utf-8', xml_declaration=True)


if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    logging.basicConfig(format='%(asctime)s: %(levelname)s: %(message)s', level=logging.DEBUG)

    if len(sys.argv) > 1:

        input_file = ''
        opts, args = getopt.getopt(sys.argv[1:], 'hi:')
        for op, value in opts:
            if op == '-i':
                input_file = value
            else:
                exit(1)

    generate_xes(filename=input_file)
